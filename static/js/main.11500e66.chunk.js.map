{"version":3,"sources":["logo.svg","telegram.js","barbora.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","url","postMessage","chat_id","text","a","console","log","axios","post","headers","then","response","catch","error","Promise","reject","resultObject","main","status","undefined","available","timeSlots","getData","parseData","data","deliveries","report","document","cookie","axiosConfig","Accept","Authorization","Cookie","get","totalDays","params","matrix","length","day","hour","parseDay","push","hours","deliveryTime","entry","result","message","getDateTime","join","telegram","dateFormat","Date","defaults","withCredentials","App","className","src","logo","alt","onClick","barbora","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.11500e66.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from \"axios\";\nconst url =\n  \"https://api.telegram.org/bot739407650:AAHSns6g9UeSuRAIpjQbpB6CaK404jUIxPc/sendMessage\";\n\nexport async function postMessage(chat_id, text) {\n  console.log(\"Send message to Telegram\");\n  return axios\n    .post(url, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      chat_id: chat_id,\n      text: text\n    })\n    .then(response => {\n      return response;\n    })\n    .catch(error => {\n      console.log(error);\n      return Promise.reject(\"Fetch did not succeed\");\n    });\n}\n","import axios from \"axios\";\nimport * as telegram from \"./telegram.js\";\nimport dateFormat from \"dateformat\";\nconst url = \"https://www.barbora.lt/api/eshop/v1/cart/deliveries\";\nconst cookie =\n  \"f5avraaaaaaaaaaaaaaaa_session_=MMNKLAEDKFMJDAPKKMJLHLBMNIANBGBGJDPKCLFHKNHLAFFPEGCLHNMIGLEACIABDPMDBLDLNCPNLHFHDPNABOJOMKLNLEJBGNDIIJPCGHNHMDFDEBALPMDGIIGKAHEF; permissionToUseCookies=true; rememberMe=true; order=discountDesc; f5avraaaaaaaaaaaaaaaa_session_=NPANENCIKPJDDODMBODGLHFFHIBELBPNJNPDLOJKNCEDDOBPGPMENHFGOOFBOBDEPLNDHCKBJCPLCMKFODKABADJLKKBEGFIFAOAOHKMJOPNMAJAMPBKGHAFFFGDHKKN; region=barbora.lt; brbLastLoginDay=2020-03-25; .BRBAUTH=ObT7cxQf3cTyP8fH-ODruUicp2_LQtBK11bNTmt322xLNmyBPoCBFWWNv0jCtUwsLuoZdhUQvkc2FTSWBv5kgb8E5Bkp-G0glYwj5iJC9WCd1Uiepu8tFXFhaBOKiqnOUgiwh3VhsfGOdiK7JtDCxQ2\";\nconst telegramChatId = 905470537;\n\nvar resultObject;\n\nconsole.log(\"barbora!!!\");\n\ndocument.cookie = cookie;\n//main();\n//loop(180, 60);\n\nfunction task(index, delayInSeconds) {\n  setTimeout(function() {\n    console.log(`Start cycle No:${index} @${getDateTime()}`);\n    main();\n  }, delayInSeconds * 1000 * index);\n}\n\nasync function loop(itterations, delayInSeconds) {\n  for (let index = 1; index <= itterations; index++) {\n    task(index, delayInSeconds);\n  }\n}\n\nexport function main0() {\n  console.log(`Test>> @${getDateTime()}`);\n}\n\nexport async function main() {\n  resultObject = {\n    status: undefined,\n    available: undefined,\n    timeSlots: []\n  };\n\n  //fetch\n  var response = await getData();\n  if (response === null || response === undefined) {\n    console.log(\"FetchError!\");\n    resultObject.status = \"FetchError\";\n  } else {\n    resultObject.status = response.status;\n    //process response\n    await parseData(response.data.deliveries[0]);\n  }\n\n  //report result\n  await report(resultObject);\n}\n\nconst axiosConfig = {\n  headers: {\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"content-Type\": \"application/json\",\n    Accept: \"/\",\n    \"Cache-Control\": \"no-cache\",\n    Authorization: \"Basic YXBpa2V5OlNlY3JldEtleQ==\",\n    Cookie: document.cookie\n  }\n};\naxios.defaults.withCredentials = true;\n\nasync function getData() {\n  return await axios\n    .get(url, axiosConfig)\n    .then(response => {\n      return response;\n    })\n    .catch(error => {\n      console.log(error);\n      return null;\n    });\n}\n\nasync function parseData(data) {\n  var totalDays = data.params.matrix.length;\n  if (totalDays === 0 || totalDays === undefined) {\n    return;\n  }\n  for (let day = 0; day < totalDays; day++) {\n    for (let hour = 0; hour < 13; hour++) {\n      var available = parseDay(data, day, hour);\n      if (available) {\n        resultObject.available = true;\n        resultObject.timeSlots.push(\n          data.params.matrix[day].hours[hour].deliveryTime\n        );\n      }\n    }\n  }\n}\n\nfunction parseDay(data, day, hour) {\n  var entry = data.params.matrix[day].hours[hour];\n  var dateAndTime = entry.deliveryTime;\n  var value = entry.available;\n\n  //console.log(dateAndTime + \" = \" + value);\n\n  if (value === true) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nasync function report(result) {\n  var message;\n  if (result.available) {\n    message = `[${getDateTime()}] Available times:\\n${result.timeSlots.join(\n      \"\\n\"\n    )}`;\n    await telegram.postMessage(telegramChatId, message);\n  } else {\n    message = `[${getDateTime()}] No time slots found [${result.status}]`;\n  }\n  console.log(message);\n  //await telegram.postMessage(telegramChatId, message);\n}\n\nfunction getDateTime() {\n  const format = \"yyyy-mm-dd HH:MM:ss\";\n  return dateFormat(new Date(), format);\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport * as barbora from \"./barbora\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <button onClick={barbora.main}>Click me! now</button>\n        <p>\n          Edit <code>src/App.js</code> and save to reload>>>.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}